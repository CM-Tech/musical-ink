export default "precision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 coords;\nuniform sampler2D density;\nuniform vec2 texelSize; // 1 / grid scale\nvec3 rgb2hsv(vec3 c) {\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n  vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\nfloat veLen(vec3 inp){\n  return inp.x+inp.y+inp.z;\n}\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvoid main() {\n  float pixelSize = 0.01;\n  float g=texelSize.y*40.0;\n  vec2 coords2 = floor(coords / texelSize / pixelSize) * texelSize * pixelSize;\n  vec2 coordsTL =\n      floor(coords / texelSize / pixelSize) * texelSize * pixelSize +\n      vec2(-texelSize.x, texelSize.y);\n  vec2 coordsTR =\n      floor(coords / texelSize / pixelSize) * texelSize * pixelSize +\n      vec2(texelSize.x, texelSize.y);\n  float w = texture2D(density, coords2).a;\n  vec3 hsvT = rgb2hsv(texture2D(density, coords2).rgb);\n  vec3 hsvTE = rgb2hsv(texture2D(density, coords2).rgb);\n  vec3 cTL = vec3(vec2(-1.0, -1.0)*g,\n                  veLen(texture2D(density, coordsTL).rgb));\n  vec3 cTR = vec3(vec2(1.0, -1.0)*g,\n                  veLen(texture2D(density, coordsTR).rgb));\n  vec3 c = vec3(0.0, 0.0, veLen(texture2D(density, coords2).rgb));\n  vec3 norm = normalize(cross(cTL - c, cTR - c));\n  hsvT.y = 0.0;\n  hsvTE.y = 1.0;\n  hsvT.z = -dot(norm, normalize(vec3(1.0, 1.0, -1.0))) / 2.0 + 0.5;\n  hsvTE.z = hsvT.z * (hsvTE.z > 0.1 ? 1.0 : hsvTE.z / 0.1);\n  float posterCount = 100.0;\n  gl_FragColor = vec4(hsv2rgb(hsvTE) + vec3(1.0) * pow(hsvTE.z, 4.0) / 2.0, w);\n}\n\n// Only used for rendering, but useful helpers\nfloat softmax(float a, float b, float k) {\n\treturn log(exp(k*a)+exp(k*b))/k;    \n}\n\nfloat softmin(float a, float b, float k) {\n\treturn -log(exp(-k*a)+exp(-k*b))/k;    \n}\n\nvec4 softmax(vec4 a, vec4 b, float k) {\n\treturn log(exp(k*a)+exp(k*b))/k;    \n}\n\nvec4 softmin(vec4 a, vec4 b, float k) {\n\treturn -log(exp(-k*a)+exp(-k*b))/k;    \n}\n\nfloat softclamp(float a, float b, float x, float k) {\n\treturn (softmin(b,softmax(a,x,k),k) + softmax(a,softmin(b,x,k),k)) / 2.0;    \n}\n\nvec4 softclamp(vec4 a, vec4 b, vec4 x, float k) {\n\treturn (softmin(b,softmax(a,x,k),k) + softmax(a,softmin(b,x,k),k)) / 2.0;    \n}\n\nvec4 softclamp(float a, float b, vec4 x, float k) {\n\treturn (softmin(vec4(b),softmax(vec4(a),x,k),k) + softmax(vec4(a),softmin(vec4(b),x,k),k)) / 2.0;    \n}\n\n\n\n\n// GGX from Noby's Goo shader https://www.shadertoy.com/view/lllBDM\n\n// MIT License: https://opensource.org/licenses/MIT\nfloat G1V(float dnv, float k){\n    return 1.0/(dnv*(1.0-k)+k);\n}\n\nfloat ggx(vec3 n, vec3 v, vec3 l, float rough, float f0){\n    float alpha = rough*rough;\n    vec3 h = normalize(v+l);\n    float dnl = clamp(dot(n,l), 0.0, 1.0);\n    float dnv = clamp(dot(n,v), 0.0, 1.0);\n    float dnh = clamp(dot(n,h), 0.0, 1.0);\n    float dlh = clamp(dot(l,h), 0.0, 1.0);\n    float f, d, vis;\n    float asqr = alpha*alpha;\n    const float pi = 3.14159;\n    float den = dnh*dnh*(asqr-1.0)+1.0;\n    d = asqr/(pi * den * den);\n    dlh = pow(1.0-dlh, 5.0);\n    f = f0 + (1.0-f0)*dlh;\n    float k = alpha/1.0;\n    vis = G1V(dnl, k)*G1V(dnv, k);\n    float spec = dnl * d * f * vis;\n    return spec;\n}\n// End Noby's GGX\n\n\n// Modified from Shane's Bumped Sinusoidal Warp shadertoy here:\n// https://www.shadertoy.com/view/4l2XWK\nvec3 light(vec2 uv, float BUMP, float SRC_DIST, vec2 dxy, float iTime, inout vec3 avd) {\n    vec3 sp = vec3(uv-0.5, 0);\n    vec3 light = vec3(cos(iTime/2.0)*0.5, sin(iTime/2.0)*0.5, -SRC_DIST);\n    vec3 ld = light - sp;\n    float lDist = max(length(ld), 0.001);\n    ld /= lDist;\n    avd = reflect(normalize(vec3(BUMP*dxy, -1.0)), vec3(0,1,0));\n    return ld;\n}\n// End Shane's bumpmapping section\n\n\n#define BUMP 3200.0\n\n#define D(d) -veLen(texture2D(density, fract(uv+(d+0.0))).xyz)\n\nvec2 diff(vec2 uv, float mip) {\n    vec2 texel = texelSize;//1.0/iResolution.xy;\n    vec4 t = float(pow(2.0,mip))*vec4(texel, -texel.y, 0);\n\n    float d =    D( t.ww); float d_n =  D( t.wy); float d_e =  D( t.xw);\n    float d_s =  D( t.wz); float d_w =  D(-t.xw); float d_nw = D(-t.xz);\n    float d_sw = D(-t.xy); float d_ne = D( t.xy); float d_se = D( t.xz);\n    \n    return vec2(\n        0.5 * (d_e - d_w) + 0.25 * (d_ne - d_nw + d_se - d_sw),\n        0.5 * (d_n - d_s) + 0.25 * (d_ne + d_nw - d_se - d_sw)\n    );\n}\n\nvec4 contrast(vec4 col, float x) {\n\treturn x * (col - 0.5) + 0.5;\n}\n/*\nvoid main( ){\n  float pixelSize = 0.5;\n  vec2 coords2 = floor(coords / texelSize / pixelSize) * texelSize * pixelSize;\n    vec2 uv = coords.xy;// *texelSize;\n\n    vec2 dxy = vec2(0);\n    float occ, mip = 0.0;\n    float d   = D();\n    \n    // blur the gradient to reduce appearance of artifacts,\n    // and do cheap occlusion with mipmaps\n    #define STEPS 1.0\n    #define ODIST 2.0\n    for(float mip = 1.0; mip <= STEPS; mip += 1.0) {\t \n        dxy += (1.0/pow(2.0,mip)) * diff(uv, mip-1.0);\t\n    \tocc += softclamp(-ODIST, ODIST, d - D(),1.0)/(pow(1.5,mip));\n    }\n    dxy /= float(STEPS);\n    dxy.y*=-1.0;\n    \n    // I think this looks nicer than using smoothstep\n    occ = pow(max(0.0,softclamp(0.2,0.8,100.0*occ + 0.5,1.0)),0.5);\n  float iTime=193.0;\n    vec3 avd;\n    vec3 ld = light(uv, BUMP, 0.5, dxy, iTime, avd);\n    \n    float spec = ggx(avd, vec3(0,1,0), ld, 0.1, 0.1);\n    \n    #define LOG_SPEC 1000.0\n    spec = (log(LOG_SPEC+1.0)/LOG_SPEC)*log(1.0+LOG_SPEC*spec);    \n    \n    \n    vec3 ccol=texture2D(density, coords2).xyz;\n    vec3 ccc=rgb2hsv(texture2D(density, coords2).xyz);\n    ccc.z=min(max(ccc.z-0.1,0.0)/0.9,1.0);\n    ccc.y=min(min(ccc.z,ccc.y*10.0),1.0);\n    //ccc=vec3(0.0,0.0,0.5);\n\t\tvec4 diffuse = vec4(hsv2rgb(ccc),1.0);//vec4(ccol/1.0,1.0);//vec4(ccol.xyz/max(max(ccol.x,max(ccol.y,ccol.z)),0.5),1.0);//softclamp(0.0,1.0,6.0*vec4(texture(iChannel0,uv).xy,0,0)+0.5,2.0);    \n \n    \n    \n    vec4 glFragColorr = (diffuse + 4.0*mix(vec4(spec),1.5*diffuse*spec,0.3));\n    gl_FragColor = mix(1.0,occ,0.7) * (softclamp(0.0,1.0,contrast(glFragColorr,4.5),3.0));\n    \n    //fragColor = vec4(occ);\n    //fragColor = vec4(spec);\n    //fragColor = diffuse;\n    //fragColor = vec4(diffuse+(occ-0.5));\n}\n*/"